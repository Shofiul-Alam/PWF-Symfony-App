<?php

namespace Proxies\__CG__\BackendBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Task extends \BackendBundle\Entity\Task implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'id', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'taskName', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'startDate', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'endDate', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'startTime', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'endTime', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'chargeRate', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'payRate', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'numberOfEmployees', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'archived', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'order', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'job', 'splicedJob', 'firstTime'];
        }

        return ['__isInitialized__', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'id', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'taskName', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'startDate', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'endDate', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'startTime', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'endTime', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'chargeRate', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'payRate', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'numberOfEmployees', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'archived', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'order', '' . "\0" . 'BackendBundle\\Entity\\Task' . "\0" . 'job', 'splicedJob', 'firstTime'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Task $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function isFirstTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFirstTime', []);

        return parent::isFirstTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstTime(bool $firstTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstTime', [$firstTime]);

        return parent::setFirstTime($firstTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartDate($startDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartDate', [$startDate]);

        return parent::setStartDate($startDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartDate', []);

        return parent::getStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndDate($endDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndDate', [$endDate]);

        return parent::setEndDate($endDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndDate', []);

        return parent::getEndDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartTime($startTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartTime', [$startTime]);

        return parent::setStartTime($startTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartTime', []);

        return parent::getStartTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndTime($endTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndTime', [$endTime]);

        return parent::setEndTime($endTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndTime', []);

        return parent::getEndTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrder(\BackendBundle\Entity\Order $order = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrder', [$order]);

        return parent::setOrder($order);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrder', []);

        return parent::getOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function getjob()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getjob', []);

        return parent::getjob();
    }

    /**
     * {@inheritDoc}
     */
    public function replaceJob(\BackendBundle\Entity\Job $job)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'replaceJob', [$job]);

        return parent::replaceJob($job);
    }

    /**
     * {@inheritDoc}
     */
    public function addJob(\BackendBundle\Entity\Job $job)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addJob', [$job]);

        return parent::addJob($job);
    }

    /**
     * {@inheritDoc}
     */
    public function removeJob(\BackendBundle\Entity\Job $job)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeJob', [$job]);

        return parent::removeJob($job);
    }

    /**
     * {@inheritDoc}
     */
    public function getChargeRate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChargeRate', []);

        return parent::getChargeRate();
    }

    /**
     * {@inheritDoc}
     */
    public function setChargeRate(float $chargeRate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChargeRate', [$chargeRate]);

        return parent::setChargeRate($chargeRate);
    }

    /**
     * {@inheritDoc}
     */
    public function getPayRate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPayRate', []);

        return parent::getPayRate();
    }

    /**
     * {@inheritDoc}
     */
    public function setPayRate(float $payRate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPayRate', [$payRate]);

        return parent::setPayRate($payRate);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumberOfEmployees()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumberOfEmployees', []);

        return parent::getNumberOfEmployees();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumberOfEmployees(int $numberOfEmployees)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumberOfEmployees', [$numberOfEmployees]);

        return parent::setNumberOfEmployees($numberOfEmployees);
    }

    /**
     * {@inheritDoc}
     */
    public function getArchived()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArchived', []);

        return parent::getArchived();
    }

    /**
     * {@inheritDoc}
     */
    public function setArchived($archived)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArchived', [$archived]);

        return parent::setArchived($archived);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaskName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaskName', []);

        return parent::getTaskName();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaskName($taskName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaskName', [$taskName]);

        return parent::setTaskName($taskName);
    }

    /**
     * {@inheritDoc}
     */
    public function getCodeName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCodeName', []);

        return parent::getCodeName();
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getEncryptedId(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEncryptedId', []);

        return parent::getEncryptedId();
    }

    /**
     * {@inheritDoc}
     */
    public function setEncryptedId(string $encryptedId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEncryptedId', [$encryptedId]);

        return parent::setEncryptedId($encryptedId);
    }

    /**
     * {@inheritDoc}
     */
    public function encodeId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'encodeId', [$id]);

        return parent::encodeId($id);
    }

}
