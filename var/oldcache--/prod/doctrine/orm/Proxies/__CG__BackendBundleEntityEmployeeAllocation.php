<?php

namespace Proxies\__CG__\BackendBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class EmployeeAllocation extends \BackendBundle\Entity\EmployeeAllocation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'id', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'cancelall', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'acceptpartially', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'acceptall', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'requestsendpartially', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'requestsendall', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'sms', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'cancelSms', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'employee', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'task', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'allocatedDates', 'splicedAllocatedDates', 'firstTime'];
        }

        return ['__isInitialized__', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'id', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'cancelall', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'acceptpartially', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'acceptall', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'requestsendpartially', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'requestsendall', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'sms', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'cancelSms', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'employee', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'task', '' . "\0" . 'BackendBundle\\Entity\\EmployeeAllocation' . "\0" . 'allocatedDates', 'splicedAllocatedDates', 'firstTime'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (EmployeeAllocation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getAllocatedDates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocatedDates', []);

        return parent::getAllocatedDates();
    }

    /**
     * {@inheritDoc}
     */
    public function replaceAllocatedDates(\BackendBundle\Entity\AllocatedDates $allocatedDates)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'replaceAllocatedDates', [$allocatedDates]);

        return parent::replaceAllocatedDates($allocatedDates);
    }

    /**
     * {@inheritDoc}
     */
    public function addAllocatedDates(\BackendBundle\Entity\AllocatedDates $allocatedDates)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAllocatedDates', [$allocatedDates]);

        return parent::addAllocatedDates($allocatedDates);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllocatedDates(\BackendBundle\Entity\AllocatedDates $allocatedDates)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllocatedDates', [$allocatedDates]);

        return parent::removeAllocatedDates($allocatedDates);
    }

    /**
     * {@inheritDoc}
     */
    public function unsetAllocatedDates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unsetAllocatedDates', []);

        return parent::unsetAllocatedDates();
    }

    /**
     * {@inheritDoc}
     */
    public function isFirstTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFirstTime', []);

        return parent::isFirstTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstTime(bool $firstTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstTime', [$firstTime]);

        return parent::setFirstTime($firstTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCancelall($cancelall)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCancelall', [$cancelall]);

        return parent::setCancelall($cancelall);
    }

    /**
     * {@inheritDoc}
     */
    public function getCancelall()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCancelall', []);

        return parent::getCancelall();
    }

    /**
     * {@inheritDoc}
     */
    public function setAcceptpartially($acceptpartially)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAcceptpartially', [$acceptpartially]);

        return parent::setAcceptpartially($acceptpartially);
    }

    /**
     * {@inheritDoc}
     */
    public function getAcceptpartially()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAcceptpartially', []);

        return parent::getAcceptpartially();
    }

    /**
     * {@inheritDoc}
     */
    public function setAcceptall($acceptall)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAcceptall', [$acceptall]);

        return parent::setAcceptall($acceptall);
    }

    /**
     * {@inheritDoc}
     */
    public function getAcceptall()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAcceptall', []);

        return parent::getAcceptall();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequestsendpartially($requestsendpartially)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequestsendpartially', [$requestsendpartially]);

        return parent::setRequestsendpartially($requestsendpartially);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequestsendpartially()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequestsendpartially', []);

        return parent::getRequestsendpartially();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequestsendall($requestsendall)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequestsendall', [$requestsendall]);

        return parent::setRequestsendall($requestsendall);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequestsendall()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequestsendall', []);

        return parent::getRequestsendall();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmployee(\BackendBundle\Entity\Employee $employee = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmployee', [$employee]);

        return parent::setEmployee($employee);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmployee()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmployee', []);

        return parent::getEmployee();
    }

    /**
     * {@inheritDoc}
     */
    public function setTask(\BackendBundle\Entity\Task $task = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTask', [$task]);

        return parent::setTask($task);
    }

    /**
     * {@inheritDoc}
     */
    public function getTask()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTask', []);

        return parent::getTask();
    }

    /**
     * {@inheritDoc}
     */
    public function getSms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSms', []);

        return parent::getSms();
    }

    /**
     * {@inheritDoc}
     */
    public function setSms(string $sms)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSms', [$sms]);

        return parent::setSms($sms);
    }

    /**
     * {@inheritDoc}
     */
    public function getCancelSms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCancelSms', []);

        return parent::getCancelSms();
    }

    /**
     * {@inheritDoc}
     */
    public function setCancelSms(string $sms)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCancelSms', [$sms]);

        return parent::setCancelSms($sms);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getEncryptedId(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEncryptedId', []);

        return parent::getEncryptedId();
    }

    /**
     * {@inheritDoc}
     */
    public function setEncryptedId(string $encryptedId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEncryptedId', [$encryptedId]);

        return parent::setEncryptedId($encryptedId);
    }

    /**
     * {@inheritDoc}
     */
    public function encodeId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'encodeId', [$id]);

        return parent::encodeId($id);
    }

}
