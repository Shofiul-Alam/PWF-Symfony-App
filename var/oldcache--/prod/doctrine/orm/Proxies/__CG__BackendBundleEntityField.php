<?php

namespace Proxies\__CG__\BackendBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Field extends \BackendBundle\Entity\Field implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'id', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'label', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'type', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'classname', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'defaultValue', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'required', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'description', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'placeholder', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'name', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'access', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'subtype', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'inline', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'value', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'min', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'max', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'form', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'valueArr', 'splicedValueArr', 'appliedRemove', 'firstTime'];
        }

        return ['__isInitialized__', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'id', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'label', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'type', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'classname', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'defaultValue', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'required', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'description', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'placeholder', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'name', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'access', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'subtype', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'inline', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'value', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'min', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'max', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'form', '' . "\0" . 'BackendBundle\\Entity\\Field' . "\0" . 'valueArr', 'splicedValueArr', 'appliedRemove', 'firstTime'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Field $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getValueArr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValueArr', []);

        return parent::getValueArr();
    }

    /**
     * {@inheritDoc}
     */
    public function addValueArr(\BackendBundle\Entity\ValueArr $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addValueArr', [$value]);

        return parent::addValueArr($value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeValueArr(\BackendBundle\Entity\ValueArr $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeValueArr', [$value]);

        return parent::removeValueArr($value);
    }

    /**
     * {@inheritDoc}
     */
    public function replaceValueArr(\BackendBundle\Entity\ValueArr $valueArr)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'replaceValueArr', [$valueArr]);

        return parent::replaceValueArr($valueArr);
    }

    /**
     * {@inheritDoc}
     */
    public function emptyValueArr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'emptyValueArr', []);

        return parent::emptyValueArr();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', [$label]);

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', []);

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultValue($defaultValue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultValue', [$defaultValue]);

        return parent::setDefaultValue($defaultValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultValue', []);

        return parent::getDefaultValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequired($required)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequired', [$required]);

        return parent::setRequired($required);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequired()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequired', []);

        return parent::getRequired();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlaceholder($placeholder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlaceholder', [$placeholder]);

        return parent::setPlaceholder($placeholder);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlaceholder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlaceholder', []);

        return parent::getPlaceholder();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccess($access)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccess', [$access]);

        return parent::setAccess($access);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccess()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccess', []);

        return parent::getAccess();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubType($subtype)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubType', [$subtype]);

        return parent::setSubType($subtype);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubType', []);

        return parent::getSubType();
    }

    /**
     * {@inheritDoc}
     */
    public function setInline($inline)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInline', [$inline]);

        return parent::setInline($inline);
    }

    /**
     * {@inheritDoc}
     */
    public function getInline()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInline', []);

        return parent::getInline();
    }

    /**
     * {@inheritDoc}
     */
    public function setValue($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValue', [$value]);

        return parent::setValue($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValue', []);

        return parent::getValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setMin($min)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMin', [$min]);

        return parent::setMin($min);
    }

    /**
     * {@inheritDoc}
     */
    public function getMin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMin', []);

        return parent::getMin();
    }

    /**
     * {@inheritDoc}
     */
    public function setMax($max)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMax', [$max]);

        return parent::setMax($max);
    }

    /**
     * {@inheritDoc}
     */
    public function getMax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMax', []);

        return parent::getMax();
    }

    /**
     * {@inheritDoc}
     */
    public function setForm(\BackendBundle\Entity\Form $form = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setForm', [$form]);

        return parent::setForm($form);
    }

    /**
     * {@inheritDoc}
     */
    public function getClassname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClassname', []);

        return parent::getClassname();
    }

    /**
     * {@inheritDoc}
     */
    public function setClassname(string $classname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClassname', [$classname]);

        return parent::setClassname($classname);
    }

    /**
     * {@inheritDoc}
     */
    public function isFirstTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFirstTime', []);

        return parent::isFirstTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstTime(bool $firstTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstTime', [$firstTime]);

        return parent::setFirstTime($firstTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getForm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForm', []);

        return parent::getForm();
    }

    /**
     * {@inheritDoc}
     */
    public function isAppliedRemove()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAppliedRemove', []);

        return parent::isAppliedRemove();
    }

    /**
     * {@inheritDoc}
     */
    public function setAppliedRemove(bool $appliedRemove)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAppliedRemove', [$appliedRemove]);

        return parent::setAppliedRemove($appliedRemove);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getEncryptedId(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEncryptedId', []);

        return parent::getEncryptedId();
    }

    /**
     * {@inheritDoc}
     */
    public function setEncryptedId(string $encryptedId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEncryptedId', [$encryptedId]);

        return parent::setEncryptedId($encryptedId);
    }

    /**
     * {@inheritDoc}
     */
    public function encodeId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'encodeId', [$id]);

        return parent::encodeId($id);
    }

}
