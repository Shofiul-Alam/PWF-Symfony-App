<?php

namespace Proxies\__CG__\BackendBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class TimeSheet extends \BackendBundle\Entity\TimeSheet implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'id', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'date', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'startTime', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'finishTime', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'break', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'hoursWorked', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'weekDay', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'workerTimesheetInstructions', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'clientTimesheetInstruction', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'approved', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'allocatedDates', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'employee', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'employeeTimesheetDocument', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'timesheetHourEntry'];
        }

        return ['__isInitialized__', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'id', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'date', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'startTime', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'finishTime', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'break', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'hoursWorked', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'weekDay', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'workerTimesheetInstructions', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'clientTimesheetInstruction', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'approved', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'allocatedDates', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'employee', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'employeeTimesheetDocument', '' . "\0" . 'BackendBundle\\Entity\\TimeSheet' . "\0" . 'timesheetHourEntry'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (TimeSheet $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartTime($startTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartTime', [$startTime]);

        return parent::setStartTime($startTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartTime', []);

        return parent::getStartTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinishTime($finishTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinishTime', [$finishTime]);

        return parent::setFinishTime($finishTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getFinishTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinishTime', []);

        return parent::getFinishTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setBreak($break)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBreak', [$break]);

        return parent::setBreak($break);
    }

    /**
     * {@inheritDoc}
     */
    public function getBreak()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBreak', []);

        return parent::getBreak();
    }

    /**
     * {@inheritDoc}
     */
    public function setHoursWorked($hoursWorked)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHoursWorked', [$hoursWorked]);

        return parent::setHoursWorked($hoursWorked);
    }

    /**
     * {@inheritDoc}
     */
    public function getHoursWorked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHoursWorked', []);

        return parent::getHoursWorked();
    }

    /**
     * {@inheritDoc}
     */
    public function setWeekDay($weekDay)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWeekDay', [$weekDay]);

        return parent::setWeekDay($weekDay);
    }

    /**
     * {@inheritDoc}
     */
    public function getWeekDay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWeekDay', []);

        return parent::getWeekDay();
    }

    /**
     * {@inheritDoc}
     */
    public function setWorkerTimesheetInstructions($workerTimesheetInstructions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWorkerTimesheetInstructions', [$workerTimesheetInstructions]);

        return parent::setWorkerTimesheetInstructions($workerTimesheetInstructions);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkerTimesheetInstructions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkerTimesheetInstructions', []);

        return parent::getWorkerTimesheetInstructions();
    }

    /**
     * {@inheritDoc}
     */
    public function setClientTimesheetInstruction($clientTimesheetInstruction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClientTimesheetInstruction', [$clientTimesheetInstruction]);

        return parent::setClientTimesheetInstruction($clientTimesheetInstruction);
    }

    /**
     * {@inheritDoc}
     */
    public function getClientTimesheetInstruction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClientTimesheetInstruction', []);

        return parent::getClientTimesheetInstruction();
    }

    /**
     * {@inheritDoc}
     */
    public function setApproved($approved)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApproved', [$approved]);

        return parent::setApproved($approved);
    }

    /**
     * {@inheritDoc}
     */
    public function getApproved()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApproved', []);

        return parent::getApproved();
    }

    /**
     * {@inheritDoc}
     */
    public function setAllocatedDates(\BackendBundle\Entity\AllocatedDates $allocatedDates = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAllocatedDates', [$allocatedDates]);

        return parent::setAllocatedDates($allocatedDates);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllocatedDates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllocatedDates', []);

        return parent::getAllocatedDates();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmployee(\BackendBundle\Entity\Employee $employee = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmployee', [$employee]);

        return parent::setEmployee($employee);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmployee()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmployee', []);

        return parent::getEmployee();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmployeeTimesheetDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmployeeTimesheetDocument', []);

        return parent::getEmployeeTimesheetDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmployeeTimesheetDocument(\BackendBundle\Entity\EmployeeTimesheetDocument $employeeTimesheetDocument)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmployeeTimesheetDocument', [$employeeTimesheetDocument]);

        return parent::setEmployeeTimesheetDocument($employeeTimesheetDocument);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimesheetHourEntry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimesheetHourEntry', []);

        return parent::getTimesheetHourEntry();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimesheetHourEntry($timesheetHourEntry)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimesheetHourEntry', [$timesheetHourEntry]);

        return parent::setTimesheetHourEntry($timesheetHourEntry);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getEncryptedId(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEncryptedId', []);

        return parent::getEncryptedId();
    }

    /**
     * {@inheritDoc}
     */
    public function setEncryptedId(string $encryptedId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEncryptedId', [$encryptedId]);

        return parent::setEncryptedId($encryptedId);
    }

    /**
     * {@inheritDoc}
     */
    public function encodeId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'encodeId', [$id]);

        return parent::encodeId($id);
    }

}
